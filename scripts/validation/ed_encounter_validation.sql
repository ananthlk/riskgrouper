CREATE OR REPLACE TABLE "TRANSFORMED_DATA"."_TEMP"."AL_INDIVIDUAL_ED_ENCOUNTERS" as

with ED as
(
    SELECT 
    distinct
    fh_id,
    CASE
       WHEN admission_date IS NULL THEN DATE(CREATED_AT)
        WHEN ADMISSION_DATE > CURRENT_DATE() THEN date(CREATED_AT) 
        WHEN admission_date IS NOT NULL THEN date(admission_date) 
    END AS ADMIT_DATE,
    DATE_FROM_PARTS(YEAR(ADMIT_DATE),MONTH(ADMIT_DATE),'01') AS EFFECTIVE_MONTH_START,
    '0.health check form' as SOURCE_TYPE
    FROM PC_FIVETRAN_DB.HELPINGHAND_PROD_DB_PUBLIC.COMMUNITY_TEAM_HEALTH_CHECKS
    where has_recent_hospitalization = TRUE AND LOWER(HOSPITALIZATION_TYPE) IN ('ed', 'emergency')

    UNION
    
    SELECT DISTINCT
    fh_id,
    ADMIT_DATE,
    DATE_FROM_PARTS(YEAR(ADMIT_DATE),MONTH(ADMIT_DATE),'01') AS EFFECTIVE_MONTH_START,
    '1.ZUS FEEDS' AS SOURCE_TYPE
    FROM   TRANSFORMED_DATA.PROD_MARTS.ZUS_AUTH_ADMITS
    WHERE LOWER(TREATMENT_SETTING) IN ('ed', 'emergency')

    union

    SELECT DISTINCT
    b.fh_id,
    ADMIT_DATE,
    DATE_FROM_PARTS(YEAR(date(ADMIT_DATE)),MONTH(date(ADMIT_DATE)),'01') AS EFFECTIVE_MONTH_START,
    '1.UHC AUTH FEEDS' AS SOURCE_TYPE
    FROM   TRANSFORMED_DATA.PROD_BASE.UHC_INPATIENT_AUTHORIZATIONS a
    left outer join TRANSFORMED_DATA.PROD.FH_MEMBERS b on a.UHC_DIAMOND_ID = b.UHC_DIAMOND_ID    

    WHERE LOWER(TREATMENT_SETTING) IN ('ed', 'emergency') AND ADMIT_DATE IS NOT NULL

    UNION

    select
    fh_id,
    ADMIT_DATE,
    DATE_FROM_PARTS(YEAR(ADMIT_DATE),MONTH(ADMIT_DATE),'01') AS EFFECTIVE_MONTH_START,
    '1.ZUS FEEDS' as SOURCE_TYPE
    from PC_FIVETRAN_DB.HELPINGHAND_PROD_DB_PUBLIC.HOSPITAL_ADMISSIONS
    WHERE LOWER(TREATMENT_SETTING) IN ('ed', 'emergency')
    and source = 'adt'
    
    
),
HC_ED_X AS 
(
    SELECT
    EFFECTIVE_MONTH_START,
    FH_ID,
    ADMIT_DATE,
    SOURCE_TYPE

    FROM ED
),

ED_DISTINCT AS
(
    SELECT DISTINCT
    EFFECTIVE_MONTH_START,
    FH_ID,
    ADMIT_DATE
    FROM HC_ED_X
),

ED_VALIDATION AS
(
    select 
    ED_distinct.EFFECTIVE_MONTH_START,
    ED_distinct.FH_ID,
    ED_distinct.ADMIT_DATE,
    b.admit_date AS ZUS_ADMIT_DATE,
    c.admit_date AS HC_ADMIT_DATE,
    d.admit_date AS AUTH_ADMIT_DATE,
    IFF(b.admit_date is null ,0,1) as zus_ed_validated,
    IFF(D.admit_date is null ,0,1) as auth_ed_validated,
    IFF(c.admit_date is null ,0,1) as HC_ed_validated
    from ED_distinct 
    left outer join HC_ED_X b on b.fh_id = ED_distinct.fh_id and ED_distinct.EFFECTIVE_MONTH_START = b.EFFECTIVE_MONTH_START and b.SOURCE_TYPE = '1.ZUS FEEDS' AND ED_DISTINCT.ADMIT_DATE = B.ADMIT_DATE
    left outer join HC_ED_X c on c.fh_id = ED_distinct.fh_id and ED_distinct.EFFECTIVE_MONTH_START = c.EFFECTIVE_MONTH_START and c.SOURCE_TYPE = '0.health check form' AND ED_DISTINCT.ADMIT_DATE = C.ADMIT_DATE
    left outer join HC_ED_X d on d.fh_id = ED_distinct.fh_id and ED_distinct.EFFECTIVE_MONTH_START = d.EFFECTIVE_MONTH_START and d.SOURCE_TYPE = '1.UHC AUTH FEEDS' AND ED_DISTINCT.ADMIT_DATE = d.ADMIT_DATE

),
ED_FINAL AS
(
    
    SELECT 
    EFFECTIVE_MONTH_START,
    ED_VALIDATION.FH_ID,
    IS_ENGAGED,
    MARKET,
    COUNT(DISTINCT ADMIT_DATE) AS NUM_ED,
    SUM(zus_ed_validated) AS COUNT_ED_ZUS_VALIDATED,
    SUM(auth_ed_validated) AS COUNT_ED_AUTH_VALIDATED,
    SUM(HC_ed_validated) AS COUNT_ED_HC_VALIDATED
    FROM ED_VALIDATION
    left outer join TRANSFORMED_DATA.PROD.FH_MEMBERS ON ED_VALIDATION.FH_ID = FH_MEMBERS.FH_ID
    GROUP BY 
    EFFECTIVE_MONTH_START,
    ED_VALIDATION.FH_ID,
    IS_ENGAGED,
    MARKET
)

SELECT * FROM ED_VALIDATION
ORDER BY EFFECTIVE_MONTH_START DESC;

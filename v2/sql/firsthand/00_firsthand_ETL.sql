
/*
===============================================================================
    FIRSTHAND ETL SCRIPT FOR ATTRIBUTED MEMBERS
-------------------------------------------------------------------------------
    This script extracts all raw, client-provided data sources for attributed members.
    Each table is a direct extraction, with minimal transformation, for downstream ETL.
===============================================================================
*/
USE DATABASE TRANSFORMED_DATA;

CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS AS
 SELECT
    A.FH_ID ,
    A.MARKET,
    A.FH_COVERAGE_CATEGORY,
    A.PAT_DATE_OF_BIRTH,
    A.PAT_PHONE,
    A.PAT_GENDER,
    CASE
        WHEN UPPER(A.CURRENT_ENGAGEMENT_STATUS) LIKE('%SUSPENDED%') THEN 'DISENROLLED'
        WHEN A.HAS_EVER_BEEN_ENGAGED = TRUE THEN 'ENGAGED'
        WHEN a.IS_BATCHED = TRUE THEN 'BATCHED'
        WHEN a.IS_BATCHED = FALSE THEN IFF(MARKET IS NULL, 'UNSERVED GEO','NOT SELECTED')
        WHEN A.IS_BATCHED = NULL THEN 'UNSERVED GEO'
    END AS ENROLLMENT_STATUS,
    DATE(a.FIRST_ENGAGED_DATE) AS FIRST_ENGAGED_DATE,
    date(a.batch_date) as FIRST_SELECTED_DATE
    FROM TRANSFORMED_DATA.PROD.FH_MEMBERS A
    JOIN TRANSFORMED_DATA.prod.fh_member_selection_qualification B ON A.FH_ID = B.FH_ID
    WHERE B.is_fh_clinically_qualified = 1
    AND UPPER(TRIM(A.fh_coverage_category)) NOT IN ('NULL', 'EXCLUDE')
    AND A.HAS_EVER_BEEN_ON_XWALK = TRUE;


CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_CLAIMS AS
SELECT
  C.FH_ID,
  C.CLAIM_ID,
  C.CLAIM_START_DATE,
  C.CLAIM_END_DATE,
  C.CLAIM_LINE_NUMBER,
  C.HCPCS_CODE,
  C.HCPCS_DESC,
  C.CLAIM_PAID_DATE,
  C.BILLING_PROVIDER_NPI,
  C.BILLING_PROVIDER_NAME,
  C.SERVING_PROVIDER_NPI,
  C.ENCOUNTER_GROUP,
  C.CLAIM_PLAN_PAID_AMOUNT,
  C.CMS_PLACE_OF_SERVICE_CODE,
  C.CMS_REVENUE_CENTER_CODE
FROM TRANSFORMED_DATA.PROD_CORE.CORE_MEDICAL_CLAIM_LINES C
INNER JOIN TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS M
  ON C.FH_ID = M.FH_ID;


CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_DIAGNOSIS AS
-- Claims: Medical claim lines for attributed members
-- Selects only relevant fields for downstream feature engineering
SELECT
  D.FH_ID,
  D.URSA_CLAIM_ID,
  D.URSA_SERVICE_PROVIDER_ID,
  D.SERVING_PROVIDER_NPI,
  D.SERVING_PROVIDER_NAME,
  D.BILLING_PROVIDER_NPI,
  D.BILLING_PROVIDER_NAME,
  D.BILLING_PROVIDER_TIN,
  D.CLAIM_START_DATE,
  D.CLAIM_END_DATE,
  D.CLAIM_PAID_DATE,
  D.RECEIVED_DATE,
  D.ICD10CM_CODE,
  D.ICD10CM_DESC,
  D.DX_LINE_NUMBER,
  D.IS_CMS_HCC_RISK_ADJUSTABLE,
  D.IS_CDPS_RISK_ADJUSTABLE,
  D.IS_FIRST_HAND_CLAIM,
  D.IS_HOUSE_CALL_CLAIM,
  D.IS_FIRSTHAND_PROVIDER
FROM TRANSFORMED_DATA.PROD_TRANSFORM.CORE_MEDICAL_CLAIM_DIAGNOSIS_LINE_ITEMS D
INNER JOIN TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS M
  ON D.FH_ID = M.FH_ID;


CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_PHARMACY AS
-- Diagnosis: Medical claim diagnosis lines for attributed members
-- Used for clinical flags and disease mapping
-- Pharmacy Claims: Pharmacy fills for attributed members
-- Used for medication adherence and fill flags
SELECT
  P.FH_ID,
  P.FILLED_DATE,
  P.NDC_CODE,
  P.NDC_CODE_11_DIGIT,
  P.PRIMARY_AGENT_DESC,
  P.ACTIVE_INGREDIENTS_NAME,
  P.PLAN_PAID_AMOUNT,
  P.IS_FH_ANTIPSYCHOTIC,
  P.IS_ANTIPSYCH_MED,
  P.IS_INSULIN,
  P.IS_ORAL_ANTIDIABETIC,
  P.IS_STATIN,
  P.IS_BETA_BLOCKER,
  P.IS_OPIATE_AGONISTS,
  P.DAYS_SUPPLY
FROM TRANSFORMED_DATA.PROD_CORE.CORE_PHARMACY_CLAIMS P
INNER JOIN TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS M
  ON P.FH_ID = M.FH_ID;


CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_NOTES AS
-- Notes: Care notes and scoring for attributed members
-- Used for unstructured data and risk scoring
SELECT
  N.FH_ID,
  DATE(N.SOURCE_INTERACTION_DATE) AS note_date,
  UPPER(TRIM(N.CATEGORY)) AS category,
  N.SCORE,
  N.CONFIDENCE,
  N.POPULATION_BASELINE,
  N.INDIVIDUAL_BASELINE,
  N.EVIDENCE,
  N.COMBINED_NOTES,
  N.RAW_RESPONSE
FROM TRANSFORMED_DATA._TEMP.AL_AI_BASELINE_SCORING N
INNER JOIN TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS M
  ON N.FH_ID = M.FH_ID;


CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_ADT AS
-- ADT & Health Check Events: All event-level feeds for attributed members
-- Combines ZUS auth and health check events, flags ED/IP events
SELECT
  FH_ID,
  DATE(ADMIT_DATE) AS event_date,
  NAME,
  TREATMENT_SETTING AS event_type,
  CASE WHEN LOWER(TREATMENT_SETTING) IN ('ed', 'emergency') THEN TRUE ELSE FALSE END AS is_ed_event,
  CASE WHEN LOWER(TREATMENT_SETTING) IN ('ip', 'inpatient', 'in-patient') THEN TRUE ELSE FALSE END AS is_ip_event
FROM TRANSFORMED_DATA.PROD_MARTS.ZUS_AUTH_ADMITS
WHERE FH_ID IN (SELECT FH_ID FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS)
UNION ALL
SELECT
  FH_ID,
  COALESCE(DATE(ADMISSION_DATE), DATE(CREATED_AT)) AS event_date,
  NULL AS NAME,
  HOSPITALIZATION_TYPE AS event_type,
  CASE WHEN LOWER(HOSPITALIZATION_TYPE) IN ('ed', 'emergency') THEN TRUE ELSE FALSE END AS is_ed_event,
  CASE WHEN LOWER(HOSPITALIZATION_TYPE) IN ('ip', 'inpatient', 'in-patient') THEN TRUE ELSE FALSE END AS is_ip_event
FROM PC_FIVETRAN_DB.HELPINGHAND_PROD_DB_PUBLIC.COMMUNITY_TEAM_HEALTH_CHECKS
WHERE FH_ID IN (SELECT FH_ID FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS)
  AND HAS_RECENT_HOSPITALIZATION = TRUE
  AND COALESCE(DATE(ADMISSION_DATE), DATE(CREATED_AT)) IS NOT NULL;

-- Contact Attempts Extraction for attributed members (non-clinical interactions)
CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_CONTACT_ATTEMPTS AS
-- Contact Attempts: Non-clinical interactions for attributed members
-- Extracts date, method, status, and outcome for individual contacts
SELECT
  FH_ID,
  CONTACT_DATE,
  METHOD,
  STATUS,
  OUTCOME,
  CONTACT_SUBJECT
FROM PC_FIVETRAN_DB.HELPINGHAND_PROD_DB_PUBLIC.CONTACT_ATTEMPTS
WHERE FH_ID IN (SELECT FH_ID FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS)
  AND CONTACT_SUBJECT = 'individual';

CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_HEALTHCHECK_ESCALATION AS
-- Health Check Escalations: Medical escalation and status for attributed members
-- Tracks escalation status, resolution, and timing
SELECT
  FH_ID,
  HEALTH_CHECK_CREATED_AT,
  HAS_RECENT_HOSPITALIZATION,
  HOSPITALIZATION_TYPE,
  HOSPITAL_ADMISSION_DATE,
  HOSPITAL_DISCHARGE_DATE,
  IS_HEALTH_DECLINING,
  INDIVIDUAL_HAS_HEALTH_CONCERNS,
  INDIVIDUAL_HAS_MEDICATION_CONCERNS,
  NOTES,
  HAS_ESCALATION,
  ESCALATION_ID,
  ESCALATION_CREATED_AT,
  ESCALATION_TYPE,
  ESCALATION_UPDATED_AT,
  ESCALATION_RESOLVED_AT,
  IS_ESCALATION_RESOLVED,
  CURRENT_ESCALATION_STATUS,
  IS_ESCALATION_ADDRESSED,
  ESCALATION_FIRST_ADDRESSED_AT,
  TIME_TO_ADDRESS_ESCALATION_HOURS,
  IS_ESCALATION_ADDRESSED_IN_48_HOURS,
FROM TRANSFORMED_DATA.PROD_TRANSFORM.FH_HEALTH_CHECK_ESCALATIONS
WHERE FH_ID IN (SELECT FH_ID FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS);
--and HAS_ESCALATION = TRUE;

-- Verizon Phone Log: Individual phone call interactions for attributed members
-- Filters for phone_number_type or phone_number_type1 = 'individual' and direction = 'phone call'
-- Selects interaction date and call duration

CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_VERIZON_PHONE_LOG AS
SELECT
  V.FH_ID,
  V.DT1,
  V.TM,
  V.STATUS,
  V.HAS_SUCCESSFUL_OUTREACH,
  V.DURATION
FROM TRANSFORMED_DATA._TEMP.AL_VERIZON_LOG V
INNER JOIN TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS M
  ON V.FH_ID = M.FH_ID
WHERE (LOWER(V.PHONE_NUMBER_TYPE) = 'individual' OR LOWER(V.PHONE_NUMBER_TYPE1) = 'individual')
  AND LOWER(V.DIRECTION) = 'phone call';

-- Verizon SMS Log: Individual SMS message interactions for attributed members
-- Filters for phone_number_type or phone_number_type1 = 'individual' and direction = 'incoming' or 'outgoing'
-- Selects interaction date and message duration (if available)
CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_VERIZON_sms_log AS
SELECT
  V.FH_ID,
  V.DT1,
  V.TM,
  V.STATUS,
  V.HAS_SUCCESSFUL_OUTREACH,
  V.DURATION
FROM TRANSFORMED_DATA._TEMP.AL_VERIZON_LOG V
INNER JOIN TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS M
  ON V.FH_ID = M.FH_ID
WHERE (LOWER(V.PHONE_NUMBER_TYPE) = 'individual' OR LOWER(V.PHONE_NUMBER_TYPE1) = 'individual')
  AND LOWER(V.DIRECTION) IN ('incoming', 'outgoing');

-- Month Enrollment Status (Eligibility File): Extracts all relevant months for attributed members
-- Only includes months where IS_CONTINUOUSLY_ENROLLED is TRUE
CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_MONTHS AS
SELECT
  M.FH_ID,
  M.EFFECTIVE_MONTH_START,
  M.EFFECTIVE_MONTH_END,
  M.IS_CONTINUOUSLY_ENROLLED
FROM TRANSFORMED_DATA.PROD.FH_MEMBER_MONTHS M
INNER JOIN TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS A
  ON M.FH_ID = A.FH_ID;

-- Control Counts: Row counts for all extracted tables
-- Use this to validate successful extraction and completeness
CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.I as
SELECT 'AL_REG_ATTRIBUTED_MEMBERS' AS table_name, COUNT(*) AS row_count, COUNT(DISTINCT FH_ID) AS unique_members FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS UNION ALL
SELECT 'AL_REG_ATTRIBUTED_MEMBERS_CLAIMS', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_CLAIMS UNION ALL
SELECT 'AL_REG_ATTRIBUTED_MEMBERS_DIAGNOSIS', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_DIAGNOSIS UNION ALL
SELECT 'AL_REG_ATTRIBUTED_MEMBERS_PHARMACY', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_PHARMACY UNION ALL
SELECT 'AL_REG_ATTRIBUTED_MEMBERS_NOTES', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_NOTES UNION ALL
SELECT 'AL_REG_ATTRIBUTED_MEMBERS_ADT', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_ADT UNION ALL
SELECT 'AL_REG_ATTRIBUTED_MEMBERS_CONTACT_ATTEMPTS', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_CONTACT_ATTEMPTS UNION ALL
SELECT 'AL_REG_ATTRIBUTED_MEMBERS_HEALTHCHECK_ESCALATION', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_HEALTHCHECK_ESCALATION UNION ALL
SELECT 'AL_VERIZON_PHONE_LOG', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_VERIZON_PHONE_LOG UNION ALL
SELECT 'AL_VERIZON_sms_log', COUNT(*), COUNT(DISTINCT FH_ID) FROM TRANSFORMED_DATA._TEMP.AL_VERIZON_sms_log;
--
select * from TRANSFORMED_DATA._TEMP.I


-- Script 1: Create valid member months
-- Set database and schema context for temp table creation
USE DATABASE TRANSFORMED_DATA;
USE SCHEMA _TEMP;

-- Define source tables for attribution and member months
SET attribution_table = 'TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS';
SET member_months_table = 'TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_MONTHS';
SET global_max_month = '2024-12-01';

-- Step 1: Build ordered member months for each individual
CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.INT_MEMBER_MONTHS_ORDERED AS
SELECT
  a.FH_ID,
  m.EFFECTIVE_MONTH_START,
  m.EFFECTIVE_MONTH_END,
  CASE
    WHEN m.IS_CONTINUOUSLY_ENROLLED = TRUE THEN 1
    WHEN m.IS_CONTINUOUSLY_ENROLLED = false then 0
    when m.IS_CONTINUOUSLY_ENROLLED is null then 0
 END AS IS_ENROLLED
FROM IDENTIFIER($attribution_table) a
JOIN IDENTIFIER($member_months_table) m ON a.FH_ID = m.FH_ID
WHERE m.EFFECTIVE_MONTH_START <= $global_max_month
ORDER BY a.FH_ID, m.EFFECTIVE_MONTH_START;

-- Step 2: Identify eligibility spans and disenrollment periods
CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.INT_ELIGIBILITY_SPANS AS
WITH last_months AS (
  SELECT FH_ID, MAX(EFFECTIVE_MONTH_START) AS last_month, 
    CASE WHEN last_month < $global_max_month THEN 1 ELSE 0 END AS is_disenrolled
  FROM INT_MEMBER_MONTHS_ORDERED
  GROUP BY FH_ID
),
spans AS (
  SELECT
    m.FH_ID,
    m.EFFECTIVE_MONTH_START,
    m.EFFECTIVE_MONTH_END,
    m.IS_ENROLLED,
    CASE WHEN m.IS_ENROLLED = TRUE AND LAG(m.IS_ENROLLED) OVER (PARTITION BY m.FH_ID ORDER BY m.EFFECTIVE_MONTH_START) = FALSE
         THEN 1 ELSE 0 END AS IS_REINSTATED,
    CASE 
      WHEN (m.IS_ENROLLED = FALSE OR m.IS_ENROLLED IS NULL) THEN 1
      WHEN m.EFFECTIVE_MONTH_START = lm.last_month THEN lm.is_disenrolled
      ELSE 0
    END AS IS_DISENROLLED
  FROM INT_MEMBER_MONTHS_ORDERED m
  JOIN last_months lm ON m.FH_ID = lm.FH_ID
)
SELECT
  FH_ID,
  EFFECTIVE_MONTH_START,
  EFFECTIVE_MONTH_END,
  IS_ENROLLED,
  IS_REINSTATED,
  IS_DISENROLLED
FROM spans;

-- Unified member months table using CTEs for stratified flags and demographics
CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.INT_MEMBER_MONTHS_UNIFIED AS


WITH stratified AS (
  SELECT
    FH_ID,
    EFFECTIVE_MONTH_START,
    YEAR(EFFECTIVE_MONTH_START) AS year,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 1, 1, 0) AS is_jan,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 2, 1, 0) AS is_feb,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 3, 1, 0) AS is_mar,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 4, 1, 0) AS is_apr,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 5, 1, 0) AS is_may,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 6, 1, 0) AS is_jun,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 7, 1, 0) AS is_jul,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 8, 1, 0) AS is_aug,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 9, 1, 0) AS is_sep,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 10, 1, 0) AS is_oct,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 11, 1, 0) AS is_nov,
    IFF(MONTH(EFFECTIVE_MONTH_START) = 12, 1, 0) AS is_dec
  FROM TRANSFORMED_DATA._TEMP.INT_MEMBER_MONTHS_ORDERED
),
demographics AS (
  SELECT
    FH_ID,
    IFF(LEFT(UPPER(PAT_GENDER), 1) = 'M', 1, 0) AS is_male,
    IFF(LEFT(UPPER(PAT_GENDER), 1) = 'F', 1, 0) AS is_female,
    IFF(is_male+is_female=0,1,0) AS is_gender_unknown,
    FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01') / 5) * 5 AS age_bucket,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 15 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 20, 1, 0) AS is_age_15_19,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 20 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 25, 1, 0) AS is_age_20_24,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 25 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 30, 1, 0) AS is_age_25_29,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 30 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 35, 1, 0) AS is_age_30_34,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 35 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 40, 1, 0) AS is_age_35_39,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 40 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 45, 1, 0) AS is_age_40_44,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 45 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 50, 1, 0) AS is_age_45_49,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 50 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 55, 1, 0) AS is_age_50_54,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 55 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 60, 1, 0) AS is_age_55_59,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 60 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 65, 1, 0) AS is_age_60_64,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 65 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 70, 1, 0) AS is_age_65_69,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 70 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 75, 1, 0) AS is_age_70_74,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 75 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 80, 1, 0) AS is_age_75_79,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 80 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 85, 1, 0) AS is_age_80_84,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 85 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 90, 1, 0) AS is_age_85_89,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 90 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 95, 1, 0) AS is_age_90_94,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 95 AND FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) < 100, 1, 0) AS is_age_95_99,
    IFF(FLOOR(DATEDIFF('YEAR', PAT_DATE_OF_BIRTH, '2023-01-01')) >= 100, 1, 0) AS is_age_100_plus
  FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS
)
SELECT
  s.FH_ID,
  s.EFFECTIVE_MONTH_START,
  s.year,
  s.is_jan,
  s.is_feb,
  s.is_mar,
  s.is_apr,
  s.is_may,
  s.is_jun,
  s.is_jul,
  s.is_aug,
  s.is_sep,
  s.is_oct,
  s.is_nov,
  s.is_dec,
  e.EFFECTIVE_MONTH_END,
  e.IS_ENROLLED,
  e.IS_REINSTATED,
  e.IS_DISENROLLED,
  d.is_male,
  d.is_female,
  d.is_gender_unknown,
  d.age_bucket,
  d.is_age_15_19,
  d.is_age_20_24,
  d.is_age_25_29,
  d.is_age_30_34,
  d.is_age_35_39,
  d.is_age_40_44,
  d.is_age_45_49,
  d.is_age_50_54,
  d.is_age_55_59,
  d.is_age_60_64,
  d.is_age_65_69,
  d.is_age_70_74,
  d.is_age_75_79,
  d.is_age_80_84,
  d.is_age_85_89,
  d.is_age_90_94,
  d.is_age_95_99,
  d.is_age_100_plus
FROM stratified s
LEFT JOIN TRANSFORMED_DATA._TEMP.INT_ELIGIBILITY_SPANS e ON s.FH_ID = e.FH_ID AND s.EFFECTIVE_MONTH_START = e.EFFECTIVE_MONTH_START
LEFT JOIN demographics d ON s.FH_ID = d.FH_ID;
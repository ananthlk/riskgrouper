-- 09_real_time_metrics.sql
-- Real-time alert flags for ED/IP events this month and last 3 months
-- Source: AL_REG_ATTRIBUTED_MEMBERS_ADT
-- Member/months table: INT_MEMBER_MONTHS_ORDERED

CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.REAL_TIME_METRICS AS
WITH member_months AS (
    SELECT FH_ID, EFFECTIVE_MONTH_START FROM TRANSFORMED_DATA._TEMP.INT_MEMBER_MONTHS_ORDERED
),
adt_events AS (
    SELECT FH_ID, event_date, is_ed_event, is_ip_event FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_ADT
),
healthcheck_escalation AS (
    SELECT FH_ID, HEALTH_CHECK_CREATED_AT, IS_HEALTH_DECLINING, INDIVIDUAL_HAS_MEDICATION_CONCERNS, INDIVIDUAL_HAS_HEALTH_CONCERNS, HAS_ESCALATION, ESCALATION_CREATED_AT, IS_ESCALATION_RESOLVED, ESCALATION_RESOLVED_AT FROM TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_HEALTHCHECK_ESCALATION
),
needed_triage_escalation_this_month AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(h.FH_ID) > 0 THEN 1 ELSE 0 END AS NEEDED_TRIAGE_ESCALATION_THIS_MONTH
    FROM member_months m
    LEFT JOIN healthcheck_escalation h
      ON h.FH_ID = m.FH_ID
     AND h.HAS_ESCALATION = TRUE
     AND h.ESCALATION_CREATED_AT >= m.EFFECTIVE_MONTH_START
     AND h.ESCALATION_CREATED_AT < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
triage_escalation_resolved_this_month AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(h.FH_ID) > 0 THEN 1 ELSE 0 END AS TRIAGE_ESCALATION_RESOLVED_THIS_MONTH
    FROM member_months m
    LEFT JOIN healthcheck_escalation h
      ON h.FH_ID = m.FH_ID
     AND h.IS_ESCALATION_RESOLVED = TRUE
     AND h.ESCALATION_RESOLVED_AT >= m.EFFECTIVE_MONTH_START
     AND h.ESCALATION_RESOLVED_AT < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
triage_escalation_unresolved_this_month AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(h.FH_ID) > 0 THEN 1 ELSE 0 END AS TRIAGE_ESCALATION_UNRESOLVED_THIS_MONTH
    FROM member_months m
    LEFT JOIN healthcheck_escalation h
      ON h.FH_ID = m.FH_ID
     AND h.HAS_ESCALATION = TRUE
     AND (h.IS_ESCALATION_RESOLVED IS NULL OR h.IS_ESCALATION_RESOLVED = FALSE)
     AND h.ESCALATION_CREATED_AT >= m.EFFECTIVE_MONTH_START
     AND h.ESCALATION_CREATED_AT < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
deteriorating_condition_this_month AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(h.FH_ID) > 0 THEN 1 ELSE 0 END AS HAD_DETERIORATING_CONDITION_THIS_MONTH
    FROM member_months m
    LEFT JOIN healthcheck_escalation h
      ON h.FH_ID = m.FH_ID
     AND h.IS_HEALTH_DECLINING = 'yes'
     AND h.HEALTH_CHECK_CREATED_AT >= m.EFFECTIVE_MONTH_START
     AND h.HEALTH_CHECK_CREATED_AT < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
medication_concern_this_month AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(h.FH_ID) > 0 THEN 1 ELSE 0 END AS HAD_MEDICATION_CONCERN_THIS_MONTH
    FROM member_months m
    LEFT JOIN healthcheck_escalation h
      ON h.FH_ID = m.FH_ID
     AND h.INDIVIDUAL_HAS_MEDICATION_CONCERNS = 'yes'
     AND h.HEALTH_CHECK_CREATED_AT >= m.EFFECTIVE_MONTH_START
     AND h.HEALTH_CHECK_CREATED_AT < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
medical_needs_this_month AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(h.FH_ID) > 0 THEN 1 ELSE 0 END AS HAD_MEDICAL_NEEDS_THIS_MONTH
    FROM member_months m
    LEFT JOIN healthcheck_escalation h
      ON h.FH_ID = m.FH_ID
     AND h.INDIVIDUAL_HAS_HEALTH_CONCERNS = 'yes'
     AND h.HEALTH_CHECK_CREATED_AT >= m.EFFECTIVE_MONTH_START
     AND h.HEALTH_CHECK_CREATED_AT < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
ed_this_month AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(a.FH_ID) > 0 THEN 1 ELSE 0 END AS HAD_ED_EVENT_THIS_MONTH
    FROM member_months m
    LEFT JOIN adt_events a
      ON a.FH_ID = m.FH_ID
     AND a.is_ed_event = TRUE
     AND a.event_date >= m.EFFECTIVE_MONTH_START
     AND a.event_date < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
ip_this_month AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(a.FH_ID) > 0 THEN 1 ELSE 0 END AS HAD_IP_EVENT_THIS_MONTH
    FROM member_months m
    LEFT JOIN adt_events a
      ON a.FH_ID = m.FH_ID
     AND a.is_ip_event = TRUE
     AND a.event_date >= m.EFFECTIVE_MONTH_START
     AND a.event_date < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
ed_last_3 AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(a.FH_ID) > 0 THEN 1 ELSE 0 END AS HAD_ED_EVENT_LAST_3_MONTHS
    FROM member_months m
    LEFT JOIN adt_events a
      ON a.FH_ID = m.FH_ID
     AND a.is_ed_event = TRUE
     AND a.event_date >= m.EFFECTIVE_MONTH_START - INTERVAL '3 MONTH'
     AND a.event_date < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
),
ip_last_3 AS (
    SELECT m.FH_ID, m.EFFECTIVE_MONTH_START,
        CASE WHEN COUNT(a.FH_ID) > 0 THEN 1 ELSE 0 END AS HAD_IP_EVENT_LAST_3_MONTHS
    FROM member_months m
    LEFT JOIN adt_events a
      ON a.FH_ID = m.FH_ID
     AND a.is_ip_event = TRUE
     AND a.event_date >= m.EFFECTIVE_MONTH_START - INTERVAL '3 MONTH'
     AND a.event_date < m.EFFECTIVE_MONTH_START + INTERVAL '1 MONTH'
    GROUP BY m.FH_ID, m.EFFECTIVE_MONTH_START
)
SELECT
    m.FH_ID,
    m.EFFECTIVE_MONTH_START,
    edm.HAD_ED_EVENT_THIS_MONTH,
    ipm.HAD_IP_EVENT_THIS_MONTH,
    ed3.HAD_ED_EVENT_LAST_3_MONTHS,
    ip3.HAD_IP_EVENT_LAST_3_MONTHS,
    dcm.HAD_DETERIORATING_CONDITION_THIS_MONTH,
    mcm.HAD_MEDICATION_CONCERN_THIS_MONTH,
    mnm.HAD_MEDICAL_NEEDS_THIS_MONTH,
    nte.NEEDED_TRIAGE_ESCALATION_THIS_MONTH,
    ter.TRIAGE_ESCALATION_RESOLVED_THIS_MONTH,
    teu.TRIAGE_ESCALATION_UNRESOLVED_THIS_MONTH
FROM member_months m
LEFT JOIN ed_this_month edm ON m.FH_ID = edm.FH_ID AND m.EFFECTIVE_MONTH_START = edm.EFFECTIVE_MONTH_START
LEFT JOIN ip_this_month ipm ON m.FH_ID = ipm.FH_ID AND m.EFFECTIVE_MONTH_START = ipm.EFFECTIVE_MONTH_START
LEFT JOIN ed_last_3 ed3 ON m.FH_ID = ed3.FH_ID AND m.EFFECTIVE_MONTH_START = ed3.EFFECTIVE_MONTH_START
LEFT JOIN ip_last_3 ip3 ON m.FH_ID = ip3.FH_ID AND m.EFFECTIVE_MONTH_START = ip3.EFFECTIVE_MONTH_START
LEFT JOIN deteriorating_condition_this_month dcm ON m.FH_ID = dcm.FH_ID AND m.EFFECTIVE_MONTH_START = dcm.EFFECTIVE_MONTH_START
LEFT JOIN medication_concern_this_month mcm ON m.FH_ID = mcm.FH_ID AND m.EFFECTIVE_MONTH_START = mcm.EFFECTIVE_MONTH_START
LEFT JOIN medical_needs_this_month mnm ON m.FH_ID = mnm.FH_ID AND m.EFFECTIVE_MONTH_START = mnm.EFFECTIVE_MONTH_START
LEFT JOIN needed_triage_escalation_this_month nte ON m.FH_ID = nte.FH_ID AND m.EFFECTIVE_MONTH_START = nte.EFFECTIVE_MONTH_START
LEFT JOIN triage_escalation_resolved_this_month ter ON m.FH_ID = ter.FH_ID AND m.EFFECTIVE_MONTH_START = ter.EFFECTIVE_MONTH_START
LEFT JOIN triage_escalation_unresolved_this_month teu ON m.FH_ID = teu.FH_ID AND m.EFFECTIVE_MONTH_START = teu.EFFECTIVE_MONTH_START;

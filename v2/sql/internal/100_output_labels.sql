-- 100_output_labels.sql
-- Future-looking ED/IP event prediction labels (30/60/90 days)
-- Includes 'IS_ACTIVE_NEXT_90D' flag to account for member churn.
-- Output columns: FH_ID, EFFECTIVE_MONTH_START, ED_EVENT_NEXT_30D, ED_EVENT_NEXT_60D, ED_EVENT_NEXT_90D, IP_EVENT_NEXT_30D, IP_EVENT_NEXT_60D, IP_EVENT_NEXT_90D, IS_ACTIVE_NEXT_90D

CREATE OR REPLACE TABLE TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_ED_IP_EVENT_LABELS AS
WITH member_months AS (
    SELECT FH_ID, EFFECTIVE_MONTH_START
    FROM TRANSFORMED_DATA._TEMP.INT_MEMBER_MONTHS_ORDERED
    WHERE IS_ENROLLED = TRUE
),
future_events AS (
    SELECT
        mm.FH_ID,
        mm.EFFECTIVE_MONTH_START,
        -- ED event in next 30 days (next month)
        MAX(IFF(ed.EFFECTIVE_MONTH_START = DATEADD('MONTH', 1, mm.EFFECTIVE_MONTH_START) AND ed.ED_EVENTS_IN_MONTH > 0, 1, 0)) AS ED_EVENT_NEXT_30D,
        -- ED event in next 60 days (next 2 months)
        MAX(IFF(ed.EFFECTIVE_MONTH_START BETWEEN DATEADD('MONTH', 1, mm.EFFECTIVE_MONTH_START) AND DATEADD('MONTH', 2, mm.EFFECTIVE_MONTH_START) AND ed.ED_EVENTS_IN_MONTH > 0, 1, 0)) AS ED_EVENT_NEXT_60D,
        -- ED event in next 90 days (next 3 months)
        MAX(IFF(ed.EFFECTIVE_MONTH_START BETWEEN DATEADD('MONTH', 1, mm.EFFECTIVE_MONTH_START) AND DATEADD('MONTH', 3, mm.EFFECTIVE_MONTH_START) AND ed.ED_EVENTS_IN_MONTH > 0, 1, 0)) AS ED_EVENT_NEXT_90D,
        -- IP event in next 30 days (next month)
        MAX(IFF(ed.EFFECTIVE_MONTH_START = DATEADD('MONTH', 1, mm.EFFECTIVE_MONTH_START) AND ed.IP_EVENTS_IN_MONTH > 0, 1, 0)) AS IP_EVENT_NEXT_30D,
        -- IP event in next 60 days (next 2 months)
        MAX(IFF(ed.EFFECTIVE_MONTH_START BETWEEN DATEADD('MONTH', 1, mm.EFFECTIVE_MONTH_START) AND DATEADD('MONTH', 2, mm.EFFECTIVE_MONTH_START) AND ed.IP_EVENTS_IN_MONTH > 0, 1, 0)) AS IP_EVENT_NEXT_60D,
        -- IP event in next 90 days (next 3 months)
        MAX(IFF(ed.EFFECTIVE_MONTH_START BETWEEN DATEADD('MONTH', 1, mm.EFFECTIVE_MONTH_START) AND DATEADD('MONTH', 3, mm.EFFECTIVE_MONTH_START) AND ed.IP_EVENTS_IN_MONTH > 0, 1, 0)) AS IP_EVENT_NEXT_90D
    FROM member_months mm
    LEFT JOIN TRANSFORMED_DATA._TEMP.AL_REG_ATTRIBUTED_MEMBERS_ED_IP_EVENT_METRICS ed
        ON ed.FH_ID = mm.FH_ID
        AND ed.EFFECTIVE_MONTH_START BETWEEN DATEADD('MONTH', 1, mm.EFFECTIVE_MONTH_START) AND DATEADD('MONTH', 3, mm.EFFECTIVE_MONTH_START)
    GROUP BY mm.FH_ID, mm.EFFECTIVE_MONTH_START
),
active_flags AS (
    SELECT 
        mm.FH_ID, 
        mm.EFFECTIVE_MONTH_START,
        IFF(sum(future_mm.IS_ENROLLED) >= 1,1,0) AS IS_ACTIVE_NEXT_90D
    FROM member_months mm
    LEFT JOIN TRANSFORMED_DATA._TEMP.INT_MEMBER_MONTHS_ORDERED future_mm
        ON future_mm.FH_ID = mm.FH_ID
        AND future_mm.EFFECTIVE_MONTH_START = DATEADD('MONTH', 3, mm.EFFECTIVE_MONTH_START) 
    GROUP BY mm.FH_ID, mm.EFFECTIVE_MONTH_START,future_mm.IS_ENROLLED
)
SELECT
    fe.FH_ID,
    fe.EFFECTIVE_MONTH_START,
    fe.ED_EVENT_NEXT_30D,
    fe.ED_EVENT_NEXT_60D,
    fe.ED_EVENT_NEXT_90D,
    fe.IP_EVENT_NEXT_30D,
    fe.IP_EVENT_NEXT_60D,
    fe.IP_EVENT_NEXT_90D,
    af.IS_ACTIVE_NEXT_90D
FROM future_events fe
LEFT JOIN active_flags af
    ON fe.FH_ID = af.FH_ID
    AND fe.EFFECTIVE_MONTH_START = af.EFFECTIVE_MONTH_START;